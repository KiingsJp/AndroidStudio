ANDROID MANIFEST:
    <uses-feature
        android:name="android.hardware.camera"
        android:required="false" />
    <uses-permission android:name="android.permission.CAMERA" />
    <uses-permission android:name="android.permission.READ_MEDIA_IMAGES" />
    <uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE" android:maxSdkVersion="32" />


// Função na activity para cuidar das permissões negadas.

private val permissoes = listOf<String>(
    Manifest.permission.CAMERA,
    if(Build.VERSION.SDK_INT >= Build.VERSION_CODES.TIRAMISU) {
        Manifest.permission.READ_MEDIA_IMAGES
    } else {
        Manifest.permission.READ_EXTERNAL_STORAGE
    }
)

override fun onRequestPermissionsResult(
    requestCode: Int,
    permissions: Array<out String>,
    grantResults: IntArray
) {
    super.onRequestPermissionsResult(requestCode, permissions, grantResults)

    if(requestCode == 100) {
        // request code 100 = permissao de fotos --- request code 101 = permissão de gestos...
        grantResults.forEachIndexed { indice, valor ->
            if(permissions[indice] == Manifest.permission.CAMERA && valor == PackageManager.PERMISSION_DENIED) {
                // negou camera, bloquear botao de camera
                binding.btnCamera.isClickable = false
            }
        }
    }
}

// Função para requisitar as permissões

class Helper {
    companion object {
        fun requisitarPermissoes (activity: Activity, permissoes: List<String>, requestObject: Int) {

            // para nao requisitar uma permissão ja concedida
            val permissoesNegadas: MutableList<String> = mutableListOf()
            permissoes.forEach { permissao ->
                val temPermissao = ContextCompat.checkSelfPermission(activity, permissao) == PackageManager.PERMISSION_GRANTED
                if(!temPermissao) permissoesNegadas.add(permissao)
            }

            ActivityCompat.requestPermissions(
                activity,
                permissoes.toTypedArray(),
                requestObject
            )
        }
    }
}

// --------------------------------------------------------------
// ------------------ OUTRA FORMA DE FAZER


private val permissoes = listOf(
    android.Manifest.permission.CAMERA,
    android.Manifest.permission.READ_EXTERNAL_STORAGE,
    android.Manifest.permission.RECORD_AUDIO,
    android.Manifest.permission.ACCESS_COARSE_LOCATION
)
private var temPermissaoCamera = false
private var temPermissaoGaleria = false


private fun solicitarPermissoes() {

    //Verificar permissões que o usuário já tem
    val permissoesNegadas = mutableListOf<String>()
    temPermissaoCamera = ContextCompat.checkSelfPermission(
        this, android.Manifest.permission.CAMERA
    ) == PackageManager.PERMISSION_GRANTED

    temPermissaoGaleria = ContextCompat.checkSelfPermission(
        this, android.Manifest.permission.READ_EXTERNAL_STORAGE
    ) == PackageManager.PERMISSION_GRANTED

    if ( !temPermissaoCamera )
        permissoesNegadas.add(android.Manifest.permission.CAMERA)

    if ( !temPermissaoGaleria )
        permissoesNegadas.add(android.Manifest.permission.READ_EXTERNAL_STORAGE)

    //Solicitar permissões
    if( permissoesNegadas.isNotEmpty() ){

        val gerenciadorPermissoes = registerForActivityResult(
            ActivityResultContracts.RequestMultiplePermissions()
        ){ permissoes: Map<String, Boolean> ->
            //camera - true
            Log.i("novas_permissoes", "permissoes: $permissoes")
            temPermissaoCamera = permissoes[android.Manifest.permission.CAMERA]
                ?: temPermissaoCamera

            temPermissaoGaleria = permissoes[android.Manifest.permission.READ_EXTERNAL_STORAGE]
                ?: temPermissaoGaleria

        }
        gerenciadorPermissoes.launch( permissoesNegadas.toTypedArray() )

    }

}

        binding.btnGaleria.setOnClickListener {
            if( temPermissaoGaleria ){
                abrirGaleria.launch("image/*")//Mime Type
            }else{
                Toast.makeText(this, "Você não tem permissão de galeria", Toast.LENGTH_SHORT).show()
            }
        }

        binding.btnCamera.setOnClickListener {
            if( temPermissaoCamera ){
                val intent = Intent(MediaStore.ACTION_IMAGE_CAPTURE)
                abrirCamera.launch( intent )
            }else{
                Toast.makeText(this, "Você não tem permissão de galeria", Toast.LENGTH_SHORT).show()
            }
        }
